trigger:
  - main

pool:
  name: Default
  demands:
    - agent.name -equals MATT

variables:
  dockerRegistryServiceConnection: 'DockerHubConnection'  # Ensure this matches your service connection name
  imageRepository: 'msparrow224/csharpgames'                 # Replace with your actual Docker Hub username
  dockerfilePath: 'Dockerfile'                            # Adjust the path if your Dockerfile is in a subdirectory
  tag: '$(Build.BuildId)'

steps:
  - checkout: self
    persistCredentials: true

  - task: UseDotNet@2
    displayName: 'Set up .NET Core SDK'
    inputs:
      packageType: 'sdk'
      version: '8.0.401'  # Adjust to match your .NET version

  - script: dotnet restore
    displayName: 'Restore NuGet packages'

  - script: dotnet build --configuration Release --no-restore
    displayName: 'Build the application'

  - script: dotnet publish --configuration Release --no-build --output $(Build.ArtifactStagingDirectory)
    displayName: 'Publish the application'

  - script: |
      echo "dockerRegistryServiceConnection: $(dockerRegistryServiceConnection)"
      echo "imageRepository: $(imageRepository)"
      echo "dockerfilePath: $(dockerfilePath)"
      echo "tag: $(tag)"
    displayName: 'Print variables'

  - task: Docker@2
    displayName: 'Build and Push Docker Image'
    inputs:
      command: 'buildAndPush'
      repository: '$(imageRepository)'
      dockerfile: '$(dockerfilePath)'
      tags: '$(tag)'
      containerRegistry: '$(dockerRegistryServiceConnection)'
  
  - task: AzureWebAppContainer@1
    displayName: 'Deploy to Azure Web App'
    inputs:
      azureSubscription: 'AzureSubscriptionConnection'  # Replace with your service connection name
      appName: 'csharpgames'                        # Your web app name
      imageName: 'msparrow224/csharpgames'
      tag: 'latest'                                    # Or use $(Build.BuildId) if tagging images with build IDs